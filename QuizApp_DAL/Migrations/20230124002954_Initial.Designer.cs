// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizApp_DAL;

#nullable disable

namespace QuizAppDAL.Migrations
{
    [DbContext(typeof(EfDbContext))]
    [Migration("20230124002954_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizApp_DAL.Entities.Choice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Choices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10167de8-022b-4d8a-9828-17c4632b2391"),
                            QuestionId = new Guid("b9744d37-d7c6-43c5-81ab-b82b02e01aa3"),
                            Text = "System.out.println(\"Hello World\");"
                        },
                        new
                        {
                            Id = new Guid("6e72a0df-ec71-46a8-9ef7-87ab7c6b2261"),
                            QuestionId = new Guid("b9744d37-d7c6-43c5-81ab-b82b02e01aa3"),
                            Text = "cout << \"Hello World\""
                        },
                        new
                        {
                            Id = new Guid("b30e6130-73d6-4453-9524-428aabf3d1ff"),
                            QuestionId = new Guid("b9744d37-d7c6-43c5-81ab-b82b02e01aa3"),
                            Text = "Console.WriteLine(\"Hello World\")"
                        },
                        new
                        {
                            Id = new Guid("1f5f51e3-40b9-4d77-aa82-ce37f7841871"),
                            QuestionId = new Guid("749ac7fa-4687-4c0c-a2e4-974cba61a0e8"),
                            Text = "The & sign"
                        },
                        new
                        {
                            Id = new Guid("b803ce0e-1997-4b00-a589-8bf53d10d846"),
                            QuestionId = new Guid("749ac7fa-4687-4c0c-a2e4-974cba61a0e8"),
                            Text = "The * sign"
                        },
                        new
                        {
                            Id = new Guid("ef9a7cca-2a36-4029-a8d8-fbbe3f48a2f3"),
                            QuestionId = new Guid("749ac7fa-4687-4c0c-a2e4-974cba61a0e8"),
                            Text = "The + sign"
                        },
                        new
                        {
                            Id = new Guid("c6c67a58-dd8a-4fd7-85da-9f4efd67d7cf"),
                            QuestionId = new Guid("56891f72-811b-467b-a88e-d3f9be4b7081"),
                            Text = "/* This is a comment"
                        },
                        new
                        {
                            Id = new Guid("2d3b4929-6a1f-4145-8460-c5c2d58f3026"),
                            QuestionId = new Guid("56891f72-811b-467b-a88e-d3f9be4b7081"),
                            Text = "// This is a comment"
                        },
                        new
                        {
                            Id = new Guid("c20e9f32-3cc1-41da-8eda-700edc0e7a1e"),
                            QuestionId = new Guid("56891f72-811b-467b-a88e-d3f9be4b7081"),
                            Text = "# This is a comment"
                        },
                        new
                        {
                            Id = new Guid("29effdc0-ee24-4d23-b44c-daaae32b5a0b"),
                            QuestionId = new Guid("fb5f6c2d-8dd5-4281-91ce-f548ded2228e"),
                            Text = "myString"
                        },
                        new
                        {
                            Id = new Guid("8a2e6b18-f8dd-4401-92a3-e98f80926faf"),
                            QuestionId = new Guid("fb5f6c2d-8dd5-4281-91ce-f548ded2228e"),
                            Text = "Txt"
                        },
                        new
                        {
                            Id = new Guid("d58f8fd9-0d2f-44ce-a0f1-c302e0a1fb77"),
                            QuestionId = new Guid("fb5f6c2d-8dd5-4281-91ce-f548ded2228e"),
                            Text = "string"
                        },
                        new
                        {
                            Id = new Guid("9f9b48f9-61f9-4ec3-af43-4bb7a786c92d"),
                            QuestionId = new Guid("93fa1335-2bbd-4161-9f3c-824e22bd75e9"),
                            Text = "x = 5;"
                        },
                        new
                        {
                            Id = new Guid("34822d54-cd25-49c6-adb2-1483669e4199"),
                            QuestionId = new Guid("93fa1335-2bbd-4161-9f3c-824e22bd75e9"),
                            Text = "int x = 5;"
                        },
                        new
                        {
                            Id = new Guid("be3bb536-d5b6-407d-a93f-631e5a8dea2c"),
                            QuestionId = new Guid("93fa1335-2bbd-4161-9f3c-824e22bd75e9"),
                            Text = "num x = 5"
                        },
                        new
                        {
                            Id = new Guid("a3605028-62da-473f-a5e6-5dde9d101a92"),
                            QuestionId = new Guid("7c29852e-e182-459d-88a0-0634e1a093a2"),
                            Text = "Hyperlinks and Text Markup Language"
                        },
                        new
                        {
                            Id = new Guid("97419e21-ddf9-442c-9603-b99de96d8c35"),
                            QuestionId = new Guid("7c29852e-e182-459d-88a0-0634e1a093a2"),
                            Text = "Home Tool Markup Language"
                        },
                        new
                        {
                            Id = new Guid("7b5f1282-1620-44fc-967b-7efd1e04b232"),
                            QuestionId = new Guid("7c29852e-e182-459d-88a0-0634e1a093a2"),
                            Text = "Hyper Text Markup Language"
                        },
                        new
                        {
                            Id = new Guid("25769432-9fc5-4be8-b82f-3aa1b653bcc4"),
                            QuestionId = new Guid("cbbce265-2cbf-467f-a838-eddf6bcedd9f"),
                            Text = "The World Wide Web Consortium"
                        },
                        new
                        {
                            Id = new Guid("e836d58c-44be-4943-b526-8ed6e1d0449b"),
                            QuestionId = new Guid("cbbce265-2cbf-467f-a838-eddf6bcedd9f"),
                            Text = "Mozilla"
                        },
                        new
                        {
                            Id = new Guid("e825085f-09d1-45f5-8b65-b1b64da29a88"),
                            QuestionId = new Guid("cbbce265-2cbf-467f-a838-eddf6bcedd9f"),
                            Text = "Google"
                        },
                        new
                        {
                            Id = new Guid("7770b965-4695-4b19-b4ab-2c23168523b7"),
                            QuestionId = new Guid("a4ba9808-9beb-4152-9504-d0d1618a7307"),
                            Text = "<heading>"
                        },
                        new
                        {
                            Id = new Guid("1b6d7f63-9562-41da-ac00-b5284b1f5104"),
                            QuestionId = new Guid("a4ba9808-9beb-4152-9504-d0d1618a7307"),
                            Text = "<h1>"
                        },
                        new
                        {
                            Id = new Guid("dfc1af88-6627-43ac-9ca3-9a62078a6b73"),
                            QuestionId = new Guid("a4ba9808-9beb-4152-9504-d0d1618a7307"),
                            Text = "<head>"
                        },
                        new
                        {
                            Id = new Guid("ec646784-d6bd-4c27-9001-c84cb56f7a20"),
                            QuestionId = new Guid("1fc869a5-d338-4fcb-96ba-1db79cc0814c"),
                            Text = "<break>"
                        },
                        new
                        {
                            Id = new Guid("fe72f62d-a9f6-4251-b204-10d4243c414b"),
                            QuestionId = new Guid("1fc869a5-d338-4fcb-96ba-1db79cc0814c"),
                            Text = "<lb>"
                        },
                        new
                        {
                            Id = new Guid("e79a571d-4387-4c01-9acd-3adaf7a9ab8e"),
                            QuestionId = new Guid("1fc869a5-d338-4fcb-96ba-1db79cc0814c"),
                            Text = "<br>"
                        },
                        new
                        {
                            Id = new Guid("9e00556e-cbb5-4f0b-8ad4-52c1a74cb67b"),
                            QuestionId = new Guid("4fbd2b0c-9c48-4da7-b5dc-5dbce6b1d7b2"),
                            Text = "<em>"
                        },
                        new
                        {
                            Id = new Guid("d616ac6b-1aa3-4681-9c15-6e9ae87fc867"),
                            QuestionId = new Guid("4fbd2b0c-9c48-4da7-b5dc-5dbce6b1d7b2"),
                            Text = "<italic>"
                        },
                        new
                        {
                            Id = new Guid("6e504be4-e44d-4dd5-b321-21c894cf3a0c"),
                            QuestionId = new Guid("4fbd2b0c-9c48-4da7-b5dc-5dbce6b1d7b2"),
                            Text = "<i>"
                        });
                });

            modelBuilder.Entity("QuizApp_DAL.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9744d37-d7c6-43c5-81ab-b82b02e01aa3"),
                            CorrectAnswer = "Console.WriteLine(\"Hello World\")",
                            QuestionText = "What is a correct syntax to output 'Hello World' in C#?",
                            QuizId = new Guid("5491d598-3798-4c4f-a99f-f021e1406797")
                        },
                        new
                        {
                            Id = new Guid("749ac7fa-4687-4c0c-a2e4-974cba61a0e8"),
                            CorrectAnswer = "The + sign",
                            QuestionText = "Which operator is used to add together two values?",
                            QuizId = new Guid("5491d598-3798-4c4f-a99f-f021e1406797")
                        },
                        new
                        {
                            Id = new Guid("56891f72-811b-467b-a88e-d3f9be4b7081"),
                            CorrectAnswer = "// This is a comment",
                            QuestionText = "How do you insert COMMENTS in C# code?",
                            QuizId = new Guid("5491d598-3798-4c4f-a99f-f021e1406797")
                        },
                        new
                        {
                            Id = new Guid("fb5f6c2d-8dd5-4281-91ce-f548ded2228e"),
                            CorrectAnswer = "string",
                            QuestionText = "Which data type is used to create a variable that should store text?",
                            QuizId = new Guid("5491d598-3798-4c4f-a99f-f021e1406797")
                        },
                        new
                        {
                            Id = new Guid("93fa1335-2bbd-4161-9f3c-824e22bd75e9"),
                            CorrectAnswer = "int x = 5;",
                            QuestionText = "How do you create a variable with the numeric value 5?",
                            QuizId = new Guid("5491d598-3798-4c4f-a99f-f021e1406797")
                        },
                        new
                        {
                            Id = new Guid("7c29852e-e182-459d-88a0-0634e1a093a2"),
                            CorrectAnswer = "Hyper Text Markup Language",
                            QuestionText = "What does HTML stand for?",
                            QuizId = new Guid("6e60e6cb-5f99-459d-9e89-96425b57462f")
                        },
                        new
                        {
                            Id = new Guid("cbbce265-2cbf-467f-a838-eddf6bcedd9f"),
                            CorrectAnswer = "The World Wide Web Consortium",
                            QuestionText = "Who is making the Web standards?",
                            QuizId = new Guid("6e60e6cb-5f99-459d-9e89-96425b57462f")
                        },
                        new
                        {
                            Id = new Guid("a4ba9808-9beb-4152-9504-d0d1618a7307"),
                            CorrectAnswer = "<h1>",
                            QuestionText = "Choose the correct HTML element for the largest heading:",
                            QuizId = new Guid("6e60e6cb-5f99-459d-9e89-96425b57462f")
                        },
                        new
                        {
                            Id = new Guid("1fc869a5-d338-4fcb-96ba-1db79cc0814c"),
                            CorrectAnswer = "<br>",
                            QuestionText = "What is the correct HTML element for inserting a line break?",
                            QuizId = new Guid("6e60e6cb-5f99-459d-9e89-96425b57462f")
                        },
                        new
                        {
                            Id = new Guid("4fbd2b0c-9c48-4da7-b5dc-5dbce6b1d7b2"),
                            CorrectAnswer = "<em>",
                            QuestionText = "Choose the correct HTML element to define emphasized text",
                            QuizId = new Guid("6e60e6cb-5f99-459d-9e89-96425b57462f")
                        });
                });

            modelBuilder.Entity("QuizApp_DAL.Entities.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5491d598-3798-4c4f-a99f-f021e1406797"),
                            Description = "The test contains 5 questions and there is no time limit. The test is not official,\r\n                           it's just a nice way to see how much you know, or don't know, about C#.",
                            Title = "C# Quiz"
                        },
                        new
                        {
                            Id = new Guid("6e60e6cb-5f99-459d-9e89-96425b57462f"),
                            Description = "The test contains 5 questions and there is no time limit. The test is not official,\r\n                           it's just a nice way to see how much you know, or don't know, about HTML.",
                            Title = "HTML Quiz"
                        });
                });

            modelBuilder.Entity("QuizApp_DAL.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6690193a-3dbc-416c-8a20-9751b4c48f57"),
                            Title = "User"
                        },
                        new
                        {
                            Id = new Guid("c86deec2-7efa-4c13-a4ea-7614c37945d2"),
                            Title = "Admin"
                        });
                });

            modelBuilder.Entity("QuizApp_DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizApp_DAL.Entities.UserRoles", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRolesList");
                });

            modelBuilder.Entity("QuizApp_DAL.Entities.Choice", b =>
                {
                    b.HasOne("QuizApp_DAL.Entities.Question", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizApp_DAL.Entities.Question", b =>
                {
                    b.HasOne("QuizApp_DAL.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizApp_DAL.Entities.UserRoles", b =>
                {
                    b.HasOne("QuizApp_DAL.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApp_DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizApp_DAL.Entities.Question", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("QuizApp_DAL.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
